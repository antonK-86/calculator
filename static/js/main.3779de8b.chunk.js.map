{"version":3,"sources":["components/Button.js","components/Calculator.js","App.js","serviceWorker.js","index.js"],"names":["Button","props","className","onClick","handleClick","children","Calculator","useState","output","setOutput","log","setLog","flag","setFlag","isMin","setIsMin","btn","map","i","e","event","key","target","innerHTML","Number","isNaN","parseInt","evaluate","join","toString","str","c","slice","length","prev","Math","pow","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.3779de8b.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./styles/Button.css\";\n\nfunction Button(props) {\n  return (\n    <div className=\"btn\" onClick={props.handleClick}>\n      {props.children}\n    </div>\n  );\n}\n\nexport default Button;\n","import React, { useState } from \"react\";\nimport { evaluate } from \"mathjs\";\nimport \"./styles/Calculator.css\";\nimport Button from \"./Button\";\n\nfunction Calculator() {\n  // console.log(\"render calculator\");\n\n  const [output, setOutput] = useState(\"0\");\n  const [log, setLog] = useState([]);\n  const [flag, setFlag] = useState(false);\n  const [isMin, setIsMin] = useState(false); //для работы +\\-\n\n  const btns = [\n    \"C\",\n    \"<-\",\n    \"X^2\",\n    \"/\",\n    \"7\",\n    \"8\",\n    \"9\",\n    \"*\",\n    \"4\",\n    \"5\",\n    \"6\",\n    \"-\",\n    \"1\",\n    \"2\",\n    \"3\",\n    \"+\",\n    \"+/-\",\n    \"0\",\n    \",\",\n    \"=\",\n  ];\n\n  const handleClick = (event) => {\n    let key = event.target.innerHTML;\n\n    if (output === \"0\" && Number.isNaN(parseInt(key))) return; // чтобы вначале выводились только числа\n\n    if (key === \"=\") {\n      setFlag(true);\n      setLog([...log, output]);\n      setOutput(evaluate(log.join(\"\") + output).toString());\n      setLog([]);\n      setIsMin(false);\n    }\n\n    if (key === \",\") {\n      key = \".\";\n      setOutput((output) => output + key);\n    }\n\n    if (key === \"+/-\") {\n      if (!isMin) {\n        setOutput((output) => \"(-\" + output + \")\");\n        setIsMin(true);\n      } else {\n        let str = \"\";\n        for (let c of output) {\n          if (c !== \"-\" && c !== \"(\" && c !== \")\") str += c;\n        }\n        setOutput(str);\n        setIsMin(false);\n      }\n    }\n\n    if (key === \"C\") {\n      setOutput(\"0\");\n      setLog([]);\n      setFlag(false);\n      setIsMin(false);\n    }\n\n    if (key === \"&lt;-\") {\n      setOutput((output) => {\n        let str = output.slice(0, output.length - 1);\n        if (!str) return \"0\";\n        return str;\n      });\n      setIsMin(false);\n    }\n\n    if (key === \"X^2\") {\n      setFlag(true);\n      setLog([...log, output]);\n      setOutput((prev) => Math.pow(prev, 2).toString());\n      setLog([]);\n    }\n\n    if (key === \"+\" || key === \"-\" || key === \"*\" || key === \"/\") {\n      setLog([...log, output + key]);\n      setFlag(true);\n      setIsMin(false);\n    }\n\n    if (!Number.isNaN(parseInt(key))) {\n      if (output.length === 17) return;\n      if (isMin) return;\n      if (flag) setOutput(\"\");\n      setOutput((output) => {\n        if (output === \"0\") return key; //чтобы 0 не вылез вначале\n        return output + key;\n      });\n      setFlag(false);\n    }\n  };\n\n  const btn = btns.map((i) => (\n    <Button key={i} handleClick={(e) => handleClick(e)}>\n      {i}\n    </Button>\n  ));\n\n  return (\n    <div className=\"calculator\">\n      <div className=\"log\">\n        {log && log.map((i) => <span key={i}>{i}</span>)}\n      </div>\n      <div className=\"output\">\n        {output.length < 17 ? output : \"Very big value\"}\n      </div>\n      <div className=\"calc-wrap\">{btn}</div>\n    </div>\n  );\n}\n\nexport default Calculator;\n","import React from \"react\";\nimport Calculator from \"./components/Calculator\";\n\nfunction App() {\n  //console.log(\"render app\");\n  return (\n    <div className=\"app\">\n      <Calculator />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}